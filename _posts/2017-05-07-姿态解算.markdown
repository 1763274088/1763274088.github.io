---
layout: post
title:  "pixhawk源码分析—姿态解算!"
date:   2018-05-10 14:10:51 +0800
categories: Pixhawk源码分析
tags: Pixhawk源码分析
description: pixhawk源码分析—姿态解算!
---
# 1 源码结构 #

![](https://i.imgur.com/z6aeydq.jpg)

---
# 2 算法分析 #
##2.1 陀螺仪和加速度计（特性分析）##

（1）陀螺仪  

- 零漂：就是在陀螺没有转动的时候却有输出，这个输出量的大小和供电电压以及温度有关，可以在陀螺仪上电时通过一小段时间的测量来修正，为评价陀螺仪性能优劣的重要指标。


- 积分误差：对陀螺仪角速度的积分是离散的，长时间的积分会出现漂移的情况。所以要考虑积分误差的问题。

（2）加速度计  

加速度计的低频特性好，可以测量低速的静态加速度。加速度计仅仅测量的是重力加速度，3轴加速度计输出重力加速度在加速度计所在机体坐标系3个轴上的分量大小。重力加速度的方向和大小是固定的。通过这种关系，可以得到加速度计所在平面与地面的角度关系。加速度计若是绕着重力加速度的轴转动，则测量值不会改变，也就是说加速度计无法感知这种水平旋转。
  
（3）磁罗盘
##2.2 解算算法##

主要思想：利用加速度计和磁力计修正陀螺仪的误差  
  
![](https://i.imgur.com/LoArXgA.png)  
<center>解算原理图</center>  

##2.3 主要函数分析##
  
  

    `
	bool AttitudeEstimatorQ::init()
	{
		// Rotation matrix can be easily constructed from acceleration and mag field vectors
		// 'k' is Earth Z axis (Down) unit vector in body frame
		Vector<3> k = -_accel;
		k.normalize();
	
		// 'i' is Earth X axis (North) unit vector in body frame, orthogonal with 'k'
		Vector<3> i = (_mag - k * (_mag * k));
		i.normalize();
	
		// 'j' is Earth Y axis (East) unit vector in body frame, orthogonal with 'k' and 'i'
		Vector<3> j = k % i;
	
		// Fill rotation matrix
		Matrix<3, 3> R;
		R.set_row(0, i);
		R.set_row(1, j);
		R.set_row(2, k);
	
		// Convert to quaternion
		_q.from_dcm(R);
	
		// Compensate for magnetic declination
		Quaternion decl_rotation;
		decl_rotation.from_yaw(_mag_decl);
		_q = decl_rotation * _q;
	
		_q.normalize();
	
		if (PX4_ISFINITE(_q(0)) && PX4_ISFINITE(_q(1)) &&
		    PX4_ISFINITE(_q(2)) && PX4_ISFINITE(_q(3)) &&
		    _q.length() > 0.95f && _q.length() < 1.05f) {
			_inited = true;
	
		} else {
			_inited = false;
		}
	
		return _inited;
	}

    `
初始化：通过加速度计和磁力计计算初始旋转矩阵  
   
       Vector<3> k = -_accel;   
       k.normalize(); 
-_accel为从加速度计获取数据，对k归一化，得到加速度的方向向量,为机体坐标系下，地理坐标系的z轴(Down)。由于第一次测量数据时无人机一般为平稳无运动状态，所以直接将测到的加速度视为重力加速度g，把k作为dcm旋转矩阵的第三行。
   
       Vector<3> i = (_mag - k * (_mag * k));
	   i.normalize(); 
  
得到与_mag水平相同，与k正交的单位向量i，i为机体坐标下，地理坐标系的x轴(North)，把i作为dcm旋转矩阵的第一行。  

　　　　　　　　　　<img src="https://i.imgur.com/3CnfeYq.png" style="zoom:50%" />  
   
       Vector<3> j = k % i;
  
通过k与i的叉积得到j，j为机体坐标下，地理坐标系的y轴(East)，把j作为dcm旋转矩阵的第二行。   
        
        // Fill rotation matrix  
		Matrix<3, 3> R;
		R.set_row(0, i);
		R.set_row(1, j);
		R.set_row(2, k);
  
将i，j，k填入矩阵，得到旋转矩阵。  
 
		// Convert to quaternion
		_q.from_dcm(R);  
将旋转矩阵转成四元数。   
 
 
  
		/**
			 * set quaternion to rotation by DCM
			 * Reference: Shoemake, Quaternions, http://www.cs.ucr.edu/~vbz/resources/quatut.pdf
			 */
			void from_dcm(const Matrix<3, 3> &dcm)
			{
				float tr = dcm.data[0][0] + dcm.data[1][1] + dcm.data[2][2];
		
				if (tr > 0.0f) {
					float s = sqrtf(tr + 1.0f);
					data[0] = s * 0.5f;
					s = 0.5f / s;
					data[1] = (dcm.data[2][1] - dcm.data[1][2]) * s;
					data[2] = (dcm.data[0][2] - dcm.data[2][0]) * s;
					data[3] = (dcm.data[1][0] - dcm.data[0][1]) * s;
		
				} else {
					/* Find maximum diagonal element in dcm
					* store index in dcm_i */
					int dcm_i = 0;
		
					for (int i = 1; i < 3; i++) {
						if (dcm.data[i][i] > dcm.data[dcm_i][dcm_i]) {
							dcm_i = i;
						}
					}
		
					int dcm_j = (dcm_i + 1) % 3;
					int dcm_k = (dcm_i + 2) % 3;
					float s = sqrtf((dcm.data[dcm_i][dcm_i] - dcm.data[dcm_j][dcm_j] -
							 dcm.data[dcm_k][dcm_k]) + 1.0f);
					data[dcm_i + 1] = s * 0.5f;
					s = 0.5f / s;
					data[dcm_j + 1] = (dcm.data[dcm_i][dcm_j] + dcm.data[dcm_j][dcm_i]) * s;
					data[dcm_k + 1] = (dcm.data[dcm_k][dcm_i] + dcm.data[dcm_i][dcm_k]) * s;
					data[0] = (dcm.data[dcm_k][dcm_j] - dcm.data[dcm_j][dcm_k]) * s;
				}
			}  
旋转矩阵转四元数函数   
  
		// Compensate for magnetic declination
		Quaternion decl_rotation;
		decl_rotation.from_yaw(_mag_decl);
		_q = decl_rotation * _q;　　
	
		_q.normalize();   
补偿磁偏角。根据磁偏角 ＿mag＿decl获得只有航向角变化的四元数decl＿rotation，四元数＿q左乘 decl＿rotation得到磁偏角补偿后的四元数＿q。磁偏角的获取方式？  
  
		if (PX4_ISFINITE(_q(0)) && PX4_ISFINITE(_q(1)) &&
		    PX4_ISFINITE(_q(2)) && PX4_ISFINITE(_q(3)) &&
		    _q.length() > 0.95f && _q.length() < 1.05f) {
			_inited = true;
	
		} else {
			_inited = false;
		}
	
		return _inited;  
根据四元数的长度和各自的数据，判断初始化是否成功。[PX4_ISFINITE()](http://en.cppreference.com/w/cpp/numeric/math/isfinite) 

		bool AttitudeEstimatorQ::update(float dt)
	    {
		if (!_inited) {
	
			if (!_data_good) {
				return false;
			}
	
			return init();
		}
	    //在程序中return 语句是返回函数的结果值，并终止当前函数
		//https://baike.baidu.com/item/return/16284?fr=aladdin
		Quaternion q_last = _q;
	
		// Angular rate of correction
		Vector<3> corr;
		float spinRate = _gyro.length();
	    //计算角速率的模长
	
	    //根据标志位_ext_hdg_mode，判断使用什么数据进行航向校正
		if (_ext_hdg_mode > 0 && _ext_hdg_good) {
			if (_ext_hdg_mode == 1) {
				//应用视觉对航向角校正
				//将航向映射到地理坐标系，并提取xy分量
				// Vision heading correction
				// Project heading to global frame and extract XY component
				Vector<3> vision_hdg_earth = _q.conjugate(_vision_hdg);
				float vision_hdg_err = _wrap_pi(atan2f(vision_hdg_earth(1), vision_hdg_earth(0)));
				//根据vision_hdg_earth的水平分量得到vision_hdg_err，结果限定到-pi到pi
				//vision_hdg_err为视觉的航向与当前机体的航向的差值
				//将差值映射到机体坐标系，并乘以相应的权重
				// Project correction to body frame
				corr += _q.conjugate_inversed(Vector<3>(0.0f, 0.0f, -vision_hdg_err)) * _w_ext_hdg;
			}
	
			if (_ext_hdg_mode == 2) {
				//应用运动捕捉系统对航向角校正，vicon、optitrack等室内定位系统
				// Mocap heading correction
				// Project heading to global frame and extract XY component
				Vector<3> mocap_hdg_earth = _q.conjugate(_mocap_hdg);
				float mocap_hdg_err = _wrap_pi(atan2f(mocap_hdg_earth(1), mocap_hdg_earth(0)));
				// Project correction to body frame
				corr += _q.conjugate_inversed(Vector<3>(0.0f, 0.0f, -mocap_hdg_err)) * _w_ext_hdg;
			}
		}
	
		if (_ext_hdg_mode == 0 || !_ext_hdg_good) {
			//磁力计校正
			// Magnetometer correction
			// Project mag field vector to global frame and extract XY component
			Vector<3> mag_earth = _q.conjugate(_mag);
			//得到地理坐标系下的磁力计向量
			//与vision和mocap不同的是，磁多了一个磁偏角
			float mag_err = _wrap_pi(atan2f(mag_earth(1), mag_earth(0)) - _mag_decl);
			float gainMult = 1.0f;
			const float fifty_dps = 0.873f;
	
			if (spinRate > fifty_dps) {
				gainMult = math::min(spinRate / fifty_dps, 10.0f);
			}
			//当角速率大于0.873时，增大gainMult，最终效果是，增大磁误差的比重，加快校正。
	
			// Project magnetometer correction to body frame
			corr += _q.conjugate_inversed(Vector<3>(0.0f, 0.0f, -mag_err)) * _w_mag * gainMult;
		}
	
		_q.normalize();
	
	    //加速度计校正
	    //得到旋转矩阵的第三列，k，z轴
		// Accelerometer correction
		// Project 'k' unit vector of earth frame to body frame
		// Vector<3> k = _q.conjugate_inversed(Vector<3>(0.0f, 0.0f, 1.0f));
		// Optimized version with dropped zeros
		Vector<3> k(
			2.0f * (_q(1) * _q(3) - _q(0) * _q(2)),
			2.0f * (_q(2) * _q(3) + _q(0) * _q(1)),
			(_q(0) * _q(0) - _q(1) * _q(1) - _q(2) * _q(2) + _q(3) * _q(3))
		);
	
		corr += (k % (_accel - _pos_acc).normalized()) * _w_accel;
	    //_accel - _pos_acc约等于重力加速度，normalized得到重力加速度方向单位向量(机体坐标系下)
	    //k与单位向量叉乘，得到误差。
	 
	    //角速率较小时，采用i(积分)估计陀螺偏差
		// Gyro bias estimation
		if (spinRate < 0.175f) {
			_gyro_bias += corr * (_w_gyro_bias * dt);
	
			for (int i = 0; i < 3; i++) {
				_gyro_bias(i) = math::constrain(_gyro_bias(i), -_bias_max, _bias_max);
			}
	
		}
	
		_rates = _gyro + _gyro_bias;//得到经过修正后的角速率
	
		// Feed forward gyro
		corr += _rates;//PI控制器的体现
		//corr=corr+_rates=corr+_gyro+_gyro_bias
	
		// Apply correction to state
		//更新四元数
		//这一部分理论基础在《捷联惯性导航技术》中有详细介绍，关于DCM随时间传
		//递的推导过程、四元数随时间传递的推导以及DCM、欧拉角、四元数之间的相互关系都有详细的介绍。
		_q += _q.derivative(corr) * dt;
	
		// Normalize quaternion
		_q.normalize();
	
		if (!(PX4_ISFINITE(_q(0)) && PX4_ISFINITE(_q(1)) &&
		      PX4_ISFINITE(_q(2)) && PX4_ISFINITE(_q(3)))) {
			// Reset quaternion to last good state
			_q = q_last;
			_rates.zero();
			_gyro_bias.zero();
			return false;
		}
	
		return true;
	}
 update函数为该程序中最重要的函数，主要用于对四元数向量_q进行初始化赋值和更新。 
  
  
  
  

## 文章参考 ##


1. [Pixhawk-姿态解算-互补滤波][Pixhawk-姿态解算-互补滤波-url]

2. [Pixhawk之姿态解算篇（2）_mahony算法分析][Pixhawk之姿态解算篇（2）_mahony算法分析-url]

3. [Pixhawk之姿态解算篇（3）_源码姿态解算算法分析][Pixhawk之姿态解算篇（3）_源码姿态解算算法分析-url]

[Pixhawk-姿态解算-互补滤波-url]: https://blog.csdn.net/Gen_Ye/article/details/52522721/
[Pixhawk之姿态解算篇（2）_mahony算法分析-url]: https://blog.csdn.net/qq_21842557/article/details/50993809
[Pixhawk之姿态解算篇（3）_源码姿态解算算法分析-url]:https://blog.csdn.net/qq_21842557/article/details/51058206
---

# [3 源码](https://github.com/PX4/Firmware/blob/50bd148f53f1aeca6f1bd4a1caabcc18e4f2888b/src/modules/attitude_estimator_q/attitude_estimator_q_main.cpp)




    ```
	/****************************************************************************
	 *
	 *   Copyright (c) 2013-2017 PX4 Development Team. All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions
	 * are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 * 2. Redistributions in binary form must reproduce the above copyright
	 *    notice, this list of conditions and the following disclaimer in
	 *    the documentation and/or other materials provided with the
	 *    distribution.
	 * 3. Neither the name PX4 nor the names of its contributors may be
	 *    used to endorse or promote products derived from this software
	 *    without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
	 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
	 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
	 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
	 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
	 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
	 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
	 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 *
	 ****************************************************************************/
	
	/**
	 * @file main.c
	 *
	 * Example implementation of a fixed wing attitude controller. This file is a complete
	 * fixed wing controller for manual attitude control or auto waypoint control.
	 * There is no need to touch any other system components to extend / modify the
	 * complete control architecture.
	 *
	 * @author Lorenz Meier <lm@inf.ethz.ch>
	 */
	
	#include "params.h"
	
	#include <poll.h>
	
	#include <drivers/drv_hrt.h>
	#include <lib/ecl/geo/geo.h>
	#include <matrix/math.hpp>
	#include <px4_config.h>
	#include <px4_tasks.h>
	#include <systemlib/err.h>
	#include <parameters/param.h>
	#include <perf/perf_counter.h>
	#include <systemlib/pid/pid.h>
	#include <systemlib/systemlib.h>
	#include <uORB/topics/actuator_controls.h>
	#include <uORB/topics/manual_control_setpoint.h>
	#include <uORB/topics/parameter_update.h>
	#include <uORB/topics/position_setpoint_triplet.h>
	#include <uORB/topics/vehicle_attitude.h>
	#include <uORB/topics/vehicle_attitude_setpoint.h>
	#include <uORB/topics/vehicle_global_position.h>
	#include <uORB/topics/vehicle_global_position.h>
	#include <uORB/topics/vehicle_rates_setpoint.h>
	#include <uORB/topics/vehicle_status.h>
	#include <uORB/uORB.h>
	
	/* Prototypes */
	
	/**
	 * Initialize all parameter handles and values
	 *
	 */
	extern "C" int parameters_init(struct param_handles *h);
	
	/**
	 * Update all parameters
	 *
	 */
	extern "C" int parameters_update(const struct param_handles *h, struct params *p);
	
	/**
	 * Daemon management function.
	 *
	 * This function allows to start / stop the background task (daemon).
	 * The purpose of it is to be able to start the controller on the
	 * command line, query its status and stop it, without giving up
	 * the command line to one particular process or the need for bg/fg
	 * ^Z support by the shell.
	 */
	extern "C" __EXPORT int ex_fixedwing_control_main(int argc, char *argv[]);
	
	/**
	 * Mainloop of daemon.
	 */
	int fixedwing_control_thread_main(int argc, char *argv[]);
	
	/**
	 * Print the correct usage.
	 */
	static void usage(const char *reason);
	
	int parameters_init(struct param_handles *h);
	
	/**
	 * Update all parameters
	 *
	 */
	int parameters_update(const struct param_handles *h, struct params *p);
	
	/**
	 * Control roll and pitch angle.
	 *
	 * This very simple roll and pitch controller takes the current roll angle
	 * of the system and compares it to a reference. Pitch is controlled to zero and yaw remains
	 * uncontrolled (tutorial code, not intended for flight).
	 *
	 * @param att_sp The current attitude setpoint - the values the system would like to reach.
	 * @param att The current attitude. The controller should make the attitude match the setpoint
	 * @param rates_sp The angular rate setpoint. This is the output of the controller.
	 */
	void control_attitude(const struct vehicle_attitude_setpoint_s *att_sp, const struct vehicle_attitude_s *att,
			      struct vehicle_rates_setpoint_s *rates_sp,
			      struct actuator_controls_s *actuators);
	
	/**
	 * Control heading.
	 *
	 * This very simple heading to roll angle controller outputs the desired roll angle based on
	 * the current position of the system, the desired position (the setpoint) and the current
	 * heading.
	 *
	 * @param pos The current position of the system
	 * @param sp The current position setpoint
	 * @param att The current attitude
	 * @param att_sp The attitude setpoint. This is the output of the controller
	 */
	void control_heading(const struct vehicle_global_position_s *pos, const struct position_setpoint_s *sp,
			     const struct vehicle_attitude_s *att, struct vehicle_attitude_setpoint_s *att_sp);
	
	/* Variables */
	static bool thread_should_exit = false;		/**< Daemon exit flag */
	static bool thread_running = false;		/**< Daemon status flag */
	static int deamon_task;				/**< Handle of deamon task / thread */
	static struct params p;
	static struct param_handles ph;
	
	void control_attitude(const struct vehicle_attitude_setpoint_s *att_sp, const struct vehicle_attitude_s *att,
			      struct vehicle_rates_setpoint_s *rates_sp,
			      struct actuator_controls_s *actuators)
	{
	
		/*
		 * The PX4 architecture provides a mixer outside of the controller.
		 * The mixer is fed with a default vector of actuator controls, representing
		 * moments applied to the vehicle frame. This vector
		 * is structured as:
		 *
		 * Control Group 0 (attitude):
		 *
		 *    0  -  roll   (-1..+1)
		 *    1  -  pitch  (-1..+1)
		 *    2  -  yaw    (-1..+1)
		 *    3  -  thrust ( 0..+1)
		 *    4  -  flaps  (-1..+1)
		 *    ...
		 *
		 * Control Group 1 (payloads / special):
		 *
		 *    ...
		 */
	
		/*
		 * Calculate roll error and apply P gain
		 */
	
		matrix::Eulerf att_euler = matrix::Quatf(att->q);
		matrix::Eulerf att_sp_euler = matrix::Quatf(att_sp->q_d);
	
		float roll_err = att_euler.phi() - att_sp_euler.phi();
		actuators->control[0] = roll_err * p.roll_p;
	
		/*
		 * Calculate pitch error and apply P gain
		 */
		float pitch_err = att_euler.theta() - att_sp_euler.theta();
		actuators->control[1] = pitch_err * p.pitch_p;
	}
	
	void control_heading(const struct vehicle_global_position_s *pos, const struct position_setpoint_s *sp,
			     const struct vehicle_attitude_s *att, struct vehicle_attitude_setpoint_s *att_sp)
	{
	
		/*
		 * Calculate heading error of current position to desired position
		 */
	
		float bearing = get_bearing_to_next_waypoint(pos->lat, pos->lon, sp->lat, sp->lon);
	
		matrix::Eulerf att_euler = matrix::Quatf(att->q);
	
		/* calculate heading error */
		float yaw_err = att_euler.psi() - bearing;
		/* apply control gain */
		float roll_body = yaw_err * p.hdng_p;
	
		/* limit output, this commonly is a tuning parameter, too */
		if (roll_body < -0.6f) {
			roll_body = -0.6f;
	
		} else if (att_sp->roll_body > 0.6f) {
			roll_body = 0.6f;
		}
	
		matrix::Eulerf att_spe(roll_body, 0, bearing);
	
		matrix::Quatf qd(att_spe);
	
		att_sp->q_d[0] = qd(0);
		att_sp->q_d[1] = qd(1);
		att_sp->q_d[2] = qd(2);
		att_sp->q_d[3] = qd(3);
	}
	
	int parameters_init(struct param_handles *handles)
	{
		/* PID parameters */
		handles->hdng_p 	=	param_find("EXFW_HDNG_P");
		handles->roll_p 	=	param_find("EXFW_ROLL_P");
		handles->pitch_p 	=	param_find("EXFW_PITCH_P");
	
		return 0;
	}
	
	int parameters_update(const struct param_handles *handles, struct params *parameters)
	{
		param_get(handles->hdng_p, &(parameters->hdng_p));
		param_get(handles->roll_p, &(parameters->roll_p));
		param_get(handles->pitch_p, &(parameters->pitch_p));
	
		return 0;
	}
	
	
	/* Main Thread */
	int fixedwing_control_thread_main(int argc, char *argv[])
	{
		/* read arguments */
		bool verbose = false;
	
		for (int i = 1; i < argc; i++) {
			if (strcmp(argv[i], "-v") == 0 || strcmp(argv[i], "--verbose") == 0) {
				verbose = true;
			}
		}
	
		/* welcome user (warnx prints a line, including an appended\n, with variable arguments */
		warnx("[example fixedwing control] started");
	
		/* initialize parameters, first the handles, then the values */
		parameters_init(&ph);
		parameters_update(&ph, &p);
	
	
		/*
		 * PX4 uses a publish/subscribe design pattern to enable
		 * multi-threaded communication.
		 *
		 * The most elegant aspect of this is that controllers and
		 * other processes can either 'react' to new data, or run
		 * at their own pace.
		 *
		 * PX4 developer guide:
		 * https://pixhawk.ethz.ch/px4/dev/shared_object_communication
		 *
		 * Wikipedia description:
		 * http://en.wikipedia.org/wiki/Publish–subscribe_pattern
		 *
		 */
	
	
	
	
		/*
		 * Declare and safely initialize all structs to zero.
		 *
		 * These structs contain the system state and things
		 * like attitude, position, the current waypoint, etc.
		 */
		struct vehicle_attitude_s att;
		memset(&att, 0, sizeof(att));
		struct vehicle_attitude_setpoint_s att_sp;
		memset(&att_sp, 0, sizeof(att_sp));
		struct vehicle_rates_setpoint_s rates_sp;
		memset(&rates_sp, 0, sizeof(rates_sp));
		struct vehicle_global_position_s global_pos;
		memset(&global_pos, 0, sizeof(global_pos));
		struct manual_control_setpoint_s manual_sp;
		memset(&manual_sp, 0, sizeof(manual_sp));
		struct vehicle_status_s vstatus;
		memset(&vstatus, 0, sizeof(vstatus));
		struct position_setpoint_s global_sp;
		memset(&global_sp, 0, sizeof(global_sp));
	
		/* output structs - this is what is sent to the mixer */
		struct actuator_controls_s actuators;
		memset(&actuators, 0, sizeof(actuators));
	
	
		/* publish actuator controls with zero values */
		for (unsigned i = 0; i < actuator_controls_s::NUM_ACTUATOR_CONTROLS; i++) {
			actuators.control[i] = 0.0f;
		}
	
		/*
		 * Advertise that this controller will publish actuator
		 * control values and the rate setpoint
		 */
		orb_advert_t actuator_pub = orb_advertise(ORB_ID_VEHICLE_ATTITUDE_CONTROLS, &actuators);
		orb_advert_t rates_pub = orb_advertise(ORB_ID(vehicle_rates_setpoint), &rates_sp);
	
		/* subscribe to topics. */
		int att_sub = orb_subscribe(ORB_ID(vehicle_attitude));
		int global_pos_sub = orb_subscribe(ORB_ID(vehicle_global_position));
		int manual_sp_sub = orb_subscribe(ORB_ID(manual_control_setpoint));
		int vstatus_sub = orb_subscribe(ORB_ID(vehicle_status));
		int global_sp_sub = orb_subscribe(ORB_ID(position_setpoint_triplet));
		int param_sub = orb_subscribe(ORB_ID(parameter_update));
	
		/* Setup of loop */
	
		struct pollfd fds[2] = {};
		fds[0].fd = param_sub;
		fds[0].events = POLLIN;
		fds[1].fd = att_sub;
		fds[1].events = POLLIN;
	
		while (!thread_should_exit) {
	
			/*
			 * Wait for a sensor or param update, check for exit condition every 500 ms.
			 * This means that the execution will block here without consuming any resources,
			 * but will continue to execute the very moment a new attitude measurement or
			 * a param update is published. So no latency in contrast to the polling
			 * design pattern (do not confuse the poll() system call with polling).
			 *
			 * This design pattern makes the controller also agnostic of the attitude
			 * update speed - it runs as fast as the attitude updates with minimal latency.
			 */
			int ret = poll(fds, 2, 500);
	
			if (ret < 0) {
				/*
				 * Poll error, this will not really happen in practice,
				 * but its good design practice to make output an error message.
				 */
				warnx("poll error");
	
			} else if (ret == 0) {
				/* no return value = nothing changed for 500 ms, ignore */
			} else {
	
				/* only update parameters if they changed */
				if (fds[0].revents & POLLIN) {
					/* read from param to clear updated flag (uORB API requirement) */
					struct parameter_update_s update;
					orb_copy(ORB_ID(parameter_update), param_sub, &update);
	
					/* if a param update occured, re-read our parameters */
					parameters_update(&ph, &p);
				}
	
				/* only run controller if attitude changed */
				if (fds[1].revents & POLLIN) {
	
	
					/* Check if there is a new position measurement or position setpoint */
					bool pos_updated;
					orb_check(global_pos_sub, &pos_updated);
					bool global_sp_updated;
					orb_check(global_sp_sub, &global_sp_updated);
					bool manual_sp_updated;
					orb_check(manual_sp_sub, &manual_sp_updated);
	
					/* get a local copy of attitude */
					orb_copy(ORB_ID(vehicle_attitude), att_sub, &att);
	
					if (global_sp_updated) {
						struct position_setpoint_triplet_s triplet;
						orb_copy(ORB_ID(position_setpoint_triplet), global_sp_sub, &triplet);
						memcpy(&global_sp, &triplet.current, sizeof(global_sp));
					}
	
					if (manual_sp_updated)
						/* get the RC (or otherwise user based) input */
					{
						orb_copy(ORB_ID(manual_control_setpoint), manual_sp_sub, &manual_sp);
					}
	
					/* check if the throttle was ever more than 50% - go later only to failsafe if yes */
					if (PX4_ISFINITE(manual_sp.z) &&
					    (manual_sp.z >= 0.6f) &&
					    (manual_sp.z <= 1.0f)) {
					}
	
					/* get the system status and the flight mode we're in */
					orb_copy(ORB_ID(vehicle_status), vstatus_sub, &vstatus);
	
					/* publish rates */
					orb_publish(ORB_ID(vehicle_rates_setpoint), rates_pub, &rates_sp);
	
					/* sanity check and publish actuator outputs */
					if (PX4_ISFINITE(actuators.control[0]) &&
					    PX4_ISFINITE(actuators.control[1]) &&
					    PX4_ISFINITE(actuators.control[2]) &&
					    PX4_ISFINITE(actuators.control[3])) {
						orb_publish(ORB_ID_VEHICLE_ATTITUDE_CONTROLS, actuator_pub, &actuators);
	
						if (verbose) {
							warnx("published");
						}
					}
				}
			}
		}
	
		printf("[ex_fixedwing_control] exiting, stopping all motors.\n");
		thread_running = false;
	
		/* kill all outputs */
		for (unsigned i = 0; i < actuator_controls_s::NUM_ACTUATOR_CONTROLS; i++) {
			actuators.control[i] = 0.0f;
		}
	
		orb_publish(ORB_ID_VEHICLE_ATTITUDE_CONTROLS, actuator_pub, &actuators);
	
		fflush(stdout);
	
		return 0;
	}
	
	/* Startup Functions */
	
	static void
	usage(const char *reason)
	{
		if (reason) {
			fprintf(stderr, "%s\n", reason);
		}
	
		fprintf(stderr, "usage: ex_fixedwing_control {start|stop|status}\n\n");
		exit(1);
	}
	
	/**
	 * The daemon app only briefly exists to start
	 * the background job. The stack size assigned in the
	 * Makefile does only apply to this management task.
	 *
	 * The actual stack size should be set in the call
	 * to px4_task_spawn_cmd().
	 */
	int ex_fixedwing_control_main(int argc, char *argv[])
	{
		if (argc < 2) {
			usage("missing command");
		}
	
		if (!strcmp(argv[1], "start")) {
	
			if (thread_running) {
				printf("ex_fixedwing_control already running\n");
				/* this is not an error */
				exit(0);
			}
	
			thread_should_exit = false;
			deamon_task = px4_task_spawn_cmd("ex_fixedwing_control",
							 SCHED_DEFAULT,
							 SCHED_PRIORITY_MAX - 20,
							 2048,
							 fixedwing_control_thread_main,
							 (argv) ? (char *const *)&argv[2] : (char *const *)nullptr);
			thread_running = true;
			exit(0);
		}
	
		if (!strcmp(argv[1], "stop")) {
			thread_should_exit = true;
			exit(0);
		}
	
		if (!strcmp(argv[1], "status")) {
			if (thread_running) {
				printf("\tex_fixedwing_control is running\n");
	
			} else {
				printf("\tex_fixedwing_control not started\n");
			}
	
			exit(0);
		}
	
		usage("unrecognized command");
		exit(1);
	}

    ```
